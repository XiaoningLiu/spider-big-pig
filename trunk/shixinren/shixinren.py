# -*- coding: utf-8 -*-##FileName: shixinren_spider.py#Description:#     This is the web spider for http://shixin.court.gov.cn/##Author:  Xiaoning Liu#Create:  2013/11/3#import urllib2import jsonimport sysimport osimport threadingimport reimport timeimport shixinren_configsys.path.append("../")import db, log def shixinren_spider(url, startId, endId, threadId):  # Open output file  try:    priOut = open(shixinren_config.tmpFol + '/' + shixinren_config.priOut + str(threadId), 'w+')    comOut = open(shixinren_config.tmpFol + '/' + shixinren_config.comOut + str(threadId), 'w+')  except:    print "Thread %d creating output file error" % (threadId)    return      database = db.DB()  database.open()  # Get pages  for i in range(startId, endId + 1):    print "[Thread %d] Ready to get" % (threadId), str(i)    shouldSkip = False        try:      response = urllib2.urlopen(url + str(i))    except urllib2.HTTPError as e:      print "[Thread %d] Skip for HTTPError:" % (threadId), (url + str(i))      continue    except urllib2.URLError as e:      # Try three times or skip and write to failList      for j in range(shixinren_config.retryTm):        try:          response = urllib2.urlopen(url + str(i))          shouldSkip = False          break        except urllib2.HTTPError as e:          print "[Thread %d] Skip for HTTPError:" % (threadId), (url + str(i))          shouldSkip = True          break        except urllib2.URLError as e:          shouldSkip = True          if j == shixinren_config.retryTm - 1:            # lock            mutex = threading.Lock()            mutex.acquire()            failListFile = open(shixinren_config.tmpFol + '/' + shixinren_config.faiOut, 'a')            failListFile.write(str(i) + '\n')            failListFile.close()            mutex.release()            # unlock          continue          if shouldSkip == True:      continue      # Deal with json result    raw_page = response.read()    unicode_page = raw_page.decode('utf-8', 'ignore')          try:      jsonDecode = json.loads(unicode_page)      priSaveToDB(database, jsonDecode)    except:      print 'json exception'      # lock      mutex = threading.Lock()      mutex.acquire()      failListFile = open(shixinren_config.tmpFol + '/' + shixinren_config.faiOut, 'a')      failListFile.write(str(i) + '\n')      failListFile.close()      mutex.release()      # unlock      continue        # Write to result output file    if 'sexy' in jsonDecode:      out = priOut      keys= shixinren_config.priKeys    else:      out = comOut      keys= shixinren_config.comKeys           for i in keys:      if i in jsonDecode:        try:          s = jsonDecode[i]          s = s.replace(',', ' ')          s = s.replace('\n', ' ')          s = s.encode('gbk')          out.write(s)        except:          out.write(str(jsonDecode[i]))      out.write(',')        out.write('\n')  database.close()def priSaveToDB(db, item):    mutex = threading.Lock()    mutex.acquire()        if 'age' not in item:      item['age'] = ""    if 'sexy' not in item:      item['sexy'] = ""        try:      # Check whether person exists      personID = db.getPersonID(item['iname'], shixinren_config.DB_SOURCE)      if personID < 0:        # Create new person        columns = "nickName, name, updateTime, age, gender, IDnumber, infoSource"        values  = "'%s', '%s', '%s', '%s', '%s', '%s', '%s'" % (item['iname'], item['iname'], str(time.time()), item['age'], item['sexy'], item['cardNum'], shixinren_config.DB_SOURCE)        sql = "insert into personInfo (%s) values (%s)" % (columns, values)        personID = db.insert(sql)              # Check whether the dishonest case exists      sql = "select * from dishonestRecords where personID = %d and performCaseNum = '%s'" % (personID, item['caseCode'])      if len(db.select(sql)) > 0:        mutex.release()        return            # Insert new dishonest record      columns = "performBasis, personID, performCaseNum, filingTime, performCourt, publishTime, updateTime, province, fulfilled, unfulfilled, dishonestAct, performBasisUnit, obligations"      values  = "'%s', " % item["gistId"] +\                "%d, " % personID +\                "'%s', " % item["caseCode"] +\                "'%s', " % item["regDate"] +\                "'%s', " % item["courtName"] +\                "'%s', " % item["publishDate"] +\                "'%s', " % str(time.time()) +\                "'%s', " % item["areaName"] +\                "'%s', " % item["performance"] +\                "'%s', " % "" +\                "'%s', " % item["disruptTypeName"] +\                "'%s', " % item["gistUnit"] +\                "'%s'" % item["duty"]      sql = "insert into dishonestRecords (%s) values (%s)" % (columns, values)      db.exeSql(sql)          except Exception as e:      log.write(shixinren_config.DB_SOURCE, 'error', e)          mutex.release()    return    def multi_shixinren_sipder():  counter   = shixinren_config.startId  endId     = shixinren_config.endId  perAmount = shixinren_config.perThd  url       = shixinren_config.url  threadNum = 0  databases = []  # counter -> counter + perAmount - 1  while counter + perAmount - 1 <= endId:    threadNum += 1    print "Create new thread", str(threadNum)        threading.Thread(target=shixinren_spider,\				args=(url, counter, counter + perAmount - 1, threadNum,)).start()    counter = counter + perAmount      # counter -> endId  if counter <= endId:        threadNum += 1    print "Create new thread", str(threadNum)    threading.Thread(target=shixinren_spider,\          args=(url, counter, endId, threadNum,)).start()def shixinren_start():  # Create temporary folder  #shixinren_config.tmpFol += time.strftime('_%Y%m%d_%H%M%S',time.localtime(time.time()))  if os.path.exists(shixinren_config.tmpFol) == False:    os.mkdir(shixinren_config.tmpFol)  # Searching  print 'Start searching for shixinren'  multi_shixinren_sipder()  print "Searching for shixinren finished"          def main():  if __name__ == "__main__":    shixinren_start()main()